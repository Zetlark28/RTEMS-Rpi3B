Problema RTEMS

stiamo usando RTEMS v5.1 installato su Ubuntu LTS 20.4

il compilatore di RTEMS non funziona correttamente. Il file .exe che viene generato non è corretto poichè quando si va a creare il file .img il programma non viene avviato
e si ha come unico risultato sulla UART : "RTEMS RPi 3B+ 1.3 (1GB) [00a020d3]"


I passaggi eseguiti sono :
1- creazione dei file sorgenti, ad esempio "hello.c" e "init.c".
2- compilazione dei file sorgente da terminale 
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Os -g -Wall -c -fmessage-length=0 -pipe -MMD -MP -MF"init.d" -MT"init.o" -o "init.o" "../init.c"
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Os -g -Wall -c -fmessage-length=0 -pipe -MMD -MP -MF"init.d" -MT"hello.o" -o "hello.o" "../hello.c"
3- utilizzo RTEMS linker per la creazione del file .exe
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Wl,--gc-sections -o "hello-rpi.exe"  ./hello.o ./init.o  
4- genero il file .img 
	arm-rtems5-objcopy -Obinary hello-rpi.exe hello.img
	
Il gcc di RTEMS non da nessun errore ma il file .exe risultante non funziona, poichè il file .img che poi viene creato ci da come risultato : "RTEMS RPi 3B+ 1.3 (1GB) [00a020d3]".
Il passo 4 sicuramente non da problemi perchè è stato testato su dei .exe, forniti come esempio da RTEMS, e i file .img funzionano correttamente. 

stiamo usando RTEMS v5.1 installato su Ubuntu LTS 20.04.1 (64 bit)



Ciao Gianmaria, sono Clark e sto facendo la tesi con Fabrizio su RTEMS, solo che stiamo avendo un problema e mi ha detto che magari ci puoi dare una mano tu.
Stiamo provando a creare una semplice applicazione basata su RTEMS. 
Siamo partiti creandoci il nostro ambiente di sviluppo seguendo la documentazione di RTEMS (i passi principali sono riassunti qui: https://gist.github.com/giorgiobasile/1c1930a8a3ff8e36061cd7f4ef83da95), 
siamo inoltre riusciti a caricare sul RaspberryPi alcune delle applicazioni di test con successo. 
Ora, stiamo cercando di runnare una nostra semplice applicazione. 
Per farlo, è necessario buildare il codice C con un cross-compilatore gcc specifico per architetture ARM (quella del RPi), ottenuto attraverso la procedura nel link.
A questo punto, la nostra applicazione è fatta da due semplici file: init.c, hello.c

La procedura di build e generazione dell’eseguibile consiste in:
1- compilazione dei file sorgente da terminale 
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Os -g -Wall -c -fmessage-length=0 -pipe -MMD -MP -MF"init.d" -MT"init.o" -o "init.o" "../init.c"
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Os -g -Wall -c -fmessage-length=0 -pipe -MMD -MP -MF"init.d" -MT"hello.o" -o "hello.o" "../hello.c"
2- utilizzo RTEMS linker per la creazione del file .exe
	$HOME/rtems-dev/rtems/5/bin/arm-rtems5-gcc -B$HOME/rtems-dev/rtems/5/arm-rtems5/raspberrypi2/lib/ -specs bsp_specs -qrtems -ffunction-sections -fdata-sections -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -Wl,--gc-sections -o "hello-rpi.exe"  ./hello.o ./init.o  
3- genero il file .img 
	arm-rtems5-objcopy -Obinary hello-rpi.exe hello.img
	
A questo punto, il file .img è quello che va caricato sulla RPi.
Per Giorgio, che ha eseguito tutta la procedura su Mac non ci sono problemi, e il suo eseguibile funziona anche sulla mia Rpi.
L’eseguibile generato da me su Ubuntu invece stampa in console soltanto il messaggio iniziale RTEMS RPi 3B+ 1.3 (1GB) [00a020d3], sia sulla mia Rpi che su quella di Giorgio.
Al momento, il fatto di aver usato Mac invece di Ubuntu è l’unica cosa che ci sta sollevando qualche dubbio, sebbene la creazione della toolchain è stata fatta usata i medesimi comandi e non ci aspettiamo differenze di sorta.


RISOLTO PROBLEMA

Risolto problema -> il file sorgente init.c non era allineato a quello del collega. infatti c'erano due define diversi
LATO GIORGIO :
#defin CONFIGURE_APPLICATION_DOES_NOT_NEED_CLOCK_DRIVER
#define CONFIGURE_APPLICATION_DOES_NOT_NEEDS_SIMPLE_CONSOLE_DRIVER

LATO CLARK : 
#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER